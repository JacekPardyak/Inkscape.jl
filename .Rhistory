Sys.getenv("PATH")
library(sf)
url = "https://en.m.wikipedia.org/wiki/Julia_(programming_language)#/media/File%3AJulia_Programming_Language_Logo.svg"
destfile = "data.svg"
download.file(url, destfile)
library(sf)
url = "https://en.m.wikipedia.org/wiki/Julia_(programming_language)#/media/File%3AJulia_Programming_Language_Logo.svg"
destfile = "data.svg"
download.file(url, destfile)
path = system('inkscape --system-data-directory', intern = TRUE)
library(sf)
url = "https://en.m.wikipedia.org/wiki/Julia_(programming_language)#/media/File%3AJulia_Programming_Language_Logo.svg"
destfile = "data.svg"
download.file(url, destfile)
path = system('inkscape --system-data-directory', intern = TRUE)
library(sf)
url = "https://en.m.wikipedia.org/wiki/Julia_(programming_language)#/media/File%3AJulia_Programming_Language_Logo.svg"
destfile = "data.svg"
download.file(url, destfile)
path = system('inkscape --system-data-directory', intern = TRUE)
system('inkscape --version', intern = TRUE)
system('inkscape --system-data-directory', intern = TRUE)
library(sf)
url = "https://en.m.wikipedia.org/wiki/Julia_(programming_language)#/media/File%3AJulia_Programming_Language_Logo.svg"
destfile = "data.svg"
download.file(url, destfile)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
#inx_extension(input, inkscape_extension_name = "dxf12_outlines.py", ext = ".dxf")
library(sf)
url = "https://en.m.wikipedia.org/wiki/Julia_(programming_language)#/media/File%3AJulia_Programming_Language_Logo.svg"
destfile = "data.svg"
download.file(url, destfile)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
#inx_extension(input, inkscape_extension_name = "dxf12_outlines.py", ext = ".dxf")
output = tempfile("inx_", fileext = ext)
library(sf)
url = "https://en.m.wikipedia.org/wiki/Julia_(programming_language)#/media/File%3AJulia_Programming_Language_Logo.svg"
destfile = "data.svg"
download.file(url, destfile)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
inkscape_extension_name = "dxf12_outlines.py"
ext = ".dxf"
output = tempfile("inx_", fileext = ext)
con  = tempfile(pattern = "inx_", fileext = ".bat")
fmt = '@ECHO OFF
cd %s
python.exe "%s" --output="%s"  "%s"'
text = sprintf(fmt,
inkscape_python_home,
paste(inkscape_extensions_path, inkscape_extension_name, sep = "\\"),
output,
input_file_path)
library(sf)
url = "https://en.m.wikipedia.org/wiki/Julia_(programming_language)#/media/File%3AJulia_Programming_Language_Logo.svg"
input_file_path = "data.svg"
download.file(url, destfile = input_file_path)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
inkscape_extension_name = "dxf12_outlines.py"
ext = ".dxf"
output = tempfile("inx_", fileext = ext)
con  = tempfile(pattern = "inx_", fileext = ".bat")
fmt = '@ECHO OFF
cd %s
python.exe "%s" --output="%s"  "%s"'
text = sprintf(fmt,
inkscape_python_home,
paste(inkscape_extensions_path, inkscape_extension_name, sep = "\\"),
output,
input_file_path)
writeLines(text, con)
system(con)
output
library(sf)
url = "https://en.m.wikipedia.org/wiki/Julia_(programming_language)#/media/File%3AJulia_Programming_Language_Logo.svg"
input_file_path = "data.svg"
download.file(url, destfile = input_file_path)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
inkscape_extension_name = "dxf12_outlines.py"
ext = ".dxf"
output = tempfile("inx_", fileext = ext)
con  = tempfile(pattern = "inx_", fileext = ".bat")
fmt = '@ECHO OFF
cd %s
python.exe "%s" --output="%s"  "%s"'
text = sprintf(fmt,
inkscape_python_home,
paste(inkscape_extensions_path, inkscape_extension_name, sep = "\\"),
output,
input_file_path)
writeLines(text, con)
system(con)
output
df <- sf::st_read(output)
library(sf)
url = "https://en.m.wikipedia.org/wiki/Julia_(programming_language)#/media/File%3AJulia_Programming_Language_Logo.svg"
input_file_path = "data.svg"
download.file(url, destfile = input_file_path)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
inkscape_extension_name = "dxf12_outlines.py"
ext = ".dxf"
output = tempfile("inx_", fileext = ext)
con  = tempfile(pattern = "inx_", fileext = ".bat")
fmt = '@ECHO OFF
cd %s
python.exe "%s" --output="%s"  "%s"'
text = sprintf(fmt,
inkscape_python_home,
paste(inkscape_extensions_path, inkscape_extension_name, sep = "\\"),
output,
input_file_path)
writeLines(text, con)
system(con)
output
df <- sf::st_read(output)
library(sf)
url = "https://en.m.wikipedia.org/wiki/Julia_(programming_language)#/media/File%3AJulia_Programming_Language_Logo.svg"
input_file_path = "data.svg"
download.file(url, destfile = input_file_path)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
inkscape_extension_name = "dxf12_outlines.py"
ext = ".dxf"
output = tempfile("inx_", fileext = ext)
con  = tempfile(pattern = "inx_", fileext = ".bat")
fmt = '@ECHO OFF
cd %s
python.exe "%s" --output="%s"  "%s"'
text = sprintf(fmt,
inkscape_python_home,
paste(inkscape_extensions_path, inkscape_extension_name, sep = "\\"),
output,
input_file_path)
writeLines(text, con)
system(con)
output
df <- sf::st_read(output)
library(sf)
url = "https://en.m.wikipedia.org/wiki/Julia_(programming_language)#/media/File%3AJulia_Programming_Language_Logo.svg"
input = "data.svg"
download.file(url, destfile = input)
input_file_path = tempfile("inx_")
file.copy(input, input_file_path)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
inkscape_extension_name = "dxf12_outlines.py"
ext = ".dxf"
output = tempfile("inx_", fileext = ext)
con  = tempfile(pattern = "inx_", fileext = ".bat")
fmt = '@ECHO OFF
cd %s
python.exe "%s" --output="%s"  "%s"'
text = sprintf(fmt,
inkscape_python_home,
paste(inkscape_extensions_path, inkscape_extension_name, sep = "\\"),
output,
input_file_path)
writeLines(text, con)
system(con)
output
df <- sf::st_read(output)
library(sf)
url = "https://en.m.wikipedia.org/wiki/Julia_(programming_language)#/media/File%3AJulia_Programming_Language_Logo.svg"
input = "data.svg"
download.file(url, destfile = input)
input_file_path = tempfile("inx_")
file.copy(input, input_file_path)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
inkscape_extension_name = "dxf12_outlines.py"
ext = ".dxf"
output = tempfile("inx_", fileext = ext)
con  = tempfile(pattern = "inx_", fileext = ".bat")
fmt = '@ECHO OFF
cd %s
python.exe "%s" --output="%s"  "%s"'
text = sprintf(fmt,
inkscape_python_home,
paste(inkscape_extensions_path, inkscape_extension_name, sep = "\\"),
output,
input_file_path)
writeLines(text, con)
system(con)
output
df <- sf::st_read(output)
library(sf)
url = "https://upload.wikimedia.org/wikipedia/commons/1/1f/Julia_Programming_Language_Logo.svg"
input = "data.svg"
download.file(url, destfile = input)
input_file_path = tempfile("inx_")
file.copy(input, input_file_path)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
inkscape_extension_name = "dxf12_outlines.py"
ext = ".dxf"
output = tempfile("inx_", fileext = ext)
con  = tempfile(pattern = "inx_", fileext = ".bat")
fmt = '@ECHO OFF
cd %s
python.exe "%s" --output="%s"  "%s"'
text = sprintf(fmt,
inkscape_python_home,
paste(inkscape_extensions_path, inkscape_extension_name, sep = "\\"),
output,
input_file_path)
writeLines(text, con)
system(con)
output
df <- sf::st_read(output)
View(df)
View(df)
library(sf)
url = "https://upload.wikimedia.org/wikipedia/commons/1/1f/Julia_Programming_Language_Logo.svg"
input = "data.svg"
download.file(url, destfile = input)
input_file_path = tempfile("inx_")
file.copy(input, input_file_path)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
inkscape_extension_name = "dxf12_outlines.py"
ext = ".dxf"
output = tempfile("inx_", fileext = ext)
con  = tempfile(pattern = "inx_", fileext = ".bat")
fmt = '@ECHO OFF
cd %s
python.exe "%s" --output="%s"  "%s"'
text = sprintf(fmt,
inkscape_python_home,
paste(inkscape_extensions_path, inkscape_extension_name, sep = "\\"),
output,
input_file_path)
writeLines(text, con)
system(con)
output
df <- sf::st_read(output) %>% select(geometry)
library(sf)
library(dplyr)
url = "https://upload.wikimedia.org/wikipedia/commons/1/1f/Julia_Programming_Language_Logo.svg"
input = "data.svg"
download.file(url, destfile = input)
input_file_path = tempfile("inx_")
file.copy(input, input_file_path)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
inkscape_extension_name = "dxf12_outlines.py"
ext = ".dxf"
output = tempfile("inx_", fileext = ext)
con  = tempfile(pattern = "inx_", fileext = ".bat")
fmt = '@ECHO OFF
cd %s
python.exe "%s" --output="%s"  "%s"'
text = sprintf(fmt,
inkscape_python_home,
paste(inkscape_extensions_path, inkscape_extension_name, sep = "\\"),
output,
input_file_path)
writeLines(text, con)
system(con)
output
df <- sf::st_read(output) %>% select(geometry)
View(df)
library(sf)
library(dplyr)
url = "https://upload.wikimedia.org/wikipedia/commons/1/1f/Julia_Programming_Language_Logo.svg"
input = "data.svg"
download.file(url, destfile = input)
input_file_path = tempfile("inx_")
file.copy(input, input_file_path)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
inkscape_extension_name = "dxf12_outlines.py"
ext = ".dxf"
output = tempfile("inx_", fileext = ext)
con  = tempfile(pattern = "inx_", fileext = ".bat")
fmt = '@ECHO OFF
cd %s
python.exe "%s" --output="%s"  "%s"'
text = sprintf(fmt,
inkscape_python_home,
paste(inkscape_extensions_path, inkscape_extension_name, sep = "\\"),
output,
input_file_path)
writeLines(text, con)
system(con)
output
df <- sf::st_read(output) %>% select(geometry)
df %>% sf::st_write(dsn = "data.geojson", layer = "jl.geojson")
?sf::st_write
install.packages(c("askpass", "credentials", "dplyr", "labeling", "rematch", "rstan", "StanHeaders"))
system("julia --version", intern = TRUE)
library(JuliaCall)
julia <- julia_setup()
julia_command("a = sqrt(2);"); julia_eval("a")
julia_help("sqrt")
?julia_source
julia_source("script.jl")
julia_source("script.jl")
julia_source("script.jl")
julia_source("script.jl")
julia_source("script.jl")
julia_help("GeoDataFrames.write")
library(JuliaCall)
julia <- julia_setup()
julia_command("a = sqrt(2);"); julia_eval("a")
julia_help("GeoDataFrames.write")
julia_command("using GeoDataFrames")
julia_help("GeoDataFrames.write")
![](sig.png)
library(dplyr)
"./data/actions.csv" %>%
readr::read_csv() %>% DT::datatable()
library(dplyr)
"./data/extensions.csv" %>%
readr::read_csv() %>% DT::datatable()
#! warning:FALSE
library(dplyr)
"./data/extensions.csv" %>%
readr::read_csv() %>% DT::datatable()
library(knitr)
# useful function for options
`%||%` <- function(l, r) {
if (is.null(l)) r else l
}
# super-customised table printing ----
knit_print.data.frame <- function (x, options, ...) {
# get options
digits <- options$digits %||% getOption("digits")
rownames <- options$rownames %||% FALSE
pageLength <- options$pageLength %||% 10
escape <- options$escape %||% TRUE
caption <- options$table.cap
# use DT for longer tables in html
if (nrow(x) > pageLength & knitr::is_html_output()) {
numeric_cols <- sapply(x, is.numeric) |> which() |> names()
dt <- DT::datatable(x,
rownames = rownames,
caption = caption,
escape = escape,
width = "100%",
height = "auto",
options = list(pageLength = pageLength),
selection = "none")
if (length(numeric_cols) > 0) {
dt <- DT::formatRound(dt,
columns = numeric_cols,
digits = digits)
}
knitr::knit_print(dt, options)
} else {
# use kableExtra::kable for PDFs or shorter tables
k <- kableExtra::kable(x,
digits = digits,
row.names = rownames,
caption = caption,
escape = escape) |>
kableExtra::kable_styling(
full_width = options$full_width,
bootstrap_options = c("striped", "hover")
)
if (knitr::is_html_output()) {
k <- c("<div class=\"kable-table\">", k, "</div>") |>
paste(collapse = "\n")
}
knitr::asis_output(k)
}
}
registerS3method("knit_print", "data.frame", knit_print.data.frame)
library(knitr)
# useful function for options
`%||%` <- function(l, r) {
if (is.null(l)) r else l
}
# super-customised table printing ----
knit_print.data.frame <- function (x, options, ...) {
# get options
digits <- options$digits %||% getOption("digits")
rownames <- options$rownames %||% FALSE
pageLength <- options$pageLength %||% 10
escape <- options$escape %||% TRUE
caption <- options$table.cap
# use DT for longer tables in html
if (nrow(x) > pageLength & knitr::is_html_output()) {
numeric_cols <- sapply(x, is.numeric) |> which() |> names()
dt <- DT::datatable(x,
rownames = rownames,
caption = caption,
escape = escape,
width = "100%",
height = "auto",
options = list(pageLength = pageLength),
selection = "none")
if (length(numeric_cols) > 0) {
dt <- DT::formatRound(dt,
columns = numeric_cols,
digits = digits)
}
knitr::knit_print(dt, options)
} else {
# use kableExtra::kable for PDFs or shorter tables
k <- kableExtra::kable(x,
digits = digits,
row.names = rownames,
caption = caption,
escape = escape) |>
kableExtra::kable_styling(
full_width = options$full_width,
bootstrap_options = c("striped", "hover")
)
if (knitr::is_html_output()) {
k <- c("<div class=\"kable-table\">", k, "</div>") |>
paste(collapse = "\n")
}
knitr::asis_output(k)
}
}
registerS3method("knit_print", "data.frame", knit_print.data.frame)
data.frame(x = rnorm(26), y = LETTERS)
#! warning:FALSE
#! message:FALSE
#! echo:FALSE
"./data/extensions.csv" |>
readr::read_csv()
#! warning:FALSE
#! message:FALSE
#! echo:FALSE
"./data/extensions.csv" |>
rmarkdown::paged_table()
#! warning:FALSE
#! message:FALSE
#! echo:FALSE
"./data/extensions.csv" |>
readr::read_csv() |>
rmarkdown::paged_table()
install.packages(c("arrow", "config", "eurlex", "lpSolve", "minqa", "mvtnorm", "packrat", "RcppArmadillo", "reticulate", "rsconnect", "rstan", "snakecase", "StanHeaders", "terra", "yulab.utils"))
system("julia --version", intern = TRUE)
# to install frm git:
# example in package manager
# add https://github.com/evetion/GeoDataFrames.jl
remove.packages("knitr")
install.packages("knitr")
install.packages("knitr")
.libPaths()
install.packages('JuliaCall')
library(JuliaCall)
julia <- julia_setup()
library(JuliaCall)
julia <- julia_setup()
JuliaCall::julia_setup(rebuild = TRUE)
R.home()
