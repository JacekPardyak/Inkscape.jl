---
title: "Signature"
format:
  html:
    code-fold: true
---

```{r}
```


```{julia}
import Pkg; Pkg.add(["ArchGDAL", "DataFrames", "Pipe", "GeoDataFrames", "Luxor"])
using Plots, ArchGDAL, DataFrames, Pipe, Printf, GeoDataFrames

function svg2dxf(url)
  svg = tempname() * ".svg"
  download(url, svg)
  inkscape = "inkscape"
  command = "--system-data-directory"
  path = read(`$inkscape $command`, String)
  path = replace(path, "\n"=>"")
  inkscape_python_home  = replace(path, "\\share\\inkscape"=>"") * "\\bin"
  inkscape_extension_name = "dxf12_outlines.py"
  inkscape_extension_path = path * "\\extensions\\" * inkscape_extension_name 
  dxf = tempname() * ".dxf"
  bat = tempname() * ".bat"
  text = @sprintf "@ECHO OFF \n cd \"%s\" \n python.exe \"%s\" --output=\"%s\" \"%s\"\n" inkscape_python_home inkscape_extension_path dxf svg
  text
  open(bat, "w") do file
    write(bat, text)
  end
  run(`$bat`)
  replace(dxf, "\\"=>"//")
end

function make_poly(x, s, e)
  local res =  ArchGDAL.createlinestring()
  for i in s:e
    res = ArchGDAL.union(res, x[i, "geometry"])
  end
  res = ArchGDAL.polygonize(res)
#  res = ArchGDAL.getgeom(res, 0)
  res
end

df = @pipe "https://upload.wikimedia.org/wikipedia/commons/2/26/Nicolaus_Copernicus_Signature.svg" |>
  svg2dxf(_) |> 
  ArchGDAL.read(_) |>
  ArchGDAL.getlayer(_, 0) |>
  DataFrame(_) |> 
  _.""  |>
  DataFrame(geometry=_)
```


```{julia}
l  =  @pipe df |> make_poly(_, 1,562)
l |> plot
ArchGDAL.getgeom(l, 0) |> plot
ArchGDAL.getgeom(l, 1) |> plot!
ArchGDAL.getgeom(l, 11) |> plot!
ArchGDAL.getgeom(l, 12) |> plot!
ArchGDAL.getgeom(l, 13) |> plot!
#df[collect(1:60), "geometry"] |> plot
```


```{julia}
g1 = ArchGDAL.createpolygon([(0.,0.), (0.,1.), (1.,1.)])
g2 = ArchGDAL.createpolygon([(0.,1.), (1.,0.), (1.,1.)])

g1 |> plot
g2 |> plot!
#ArchGDAL.difference(g1, g2)
  ArchGDAL.union(g1, g2)
```


```{julia}
g1 = ArchGDAL.createpoint(1.0, 2.0)
g2 = ArchGDAL.createpoint(1.0, 1.0)
g1 |> plot
g2 |> plot!
ArchGDAL.union(g1, g2)
ArchGDAL.difference(g1, g2)

g1 = ArchGDAL.createlinestring([(i,i+1) for i in 1.0:3.0])
g1 = ArchGDAL.createlinearring([(0.,0.), (0.,1.), (1.,1.)])
g2 = ArchGDAL.createlinearring([(0.,1.), (1.,0.), (1.,1.)])
g1 |> plot
g2 |> plot!
ArchGDAL.union(g1, g2) #|> plot
```
