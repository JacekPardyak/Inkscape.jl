---
title: "Signature"
format:
  html:
    code-fold: true
---

```{r}
system("julia --version", intern = TRUE)
# to install frm git:
# example in package manager
# add https://github.com/evetion/GeoDataFrames.jl
```


```{julia}
import Pkg; Pkg.add(["ArchGDAL", "DataFrames", "Pipe", "GeoDataFrames", "Luxor"])
using Plots, ArchGDAL, DataFrames, Pipe, Printf, GeoDataFrames

function svg2dxf(url)
  svg = tempname() * ".svg"
  download(url, svg)
  inkscape = "inkscape"
  command = "--system-data-directory"
  path = read(`$inkscape $command`, String)
  path = replace(path, "\n"=>"")
  inkscape_python_home  = replace(path, "\\share\\inkscape"=>"") * "\\bin"
  inkscape_extension_name = "dxf12_outlines.py"
  inkscape_extension_path = path * "\\extensions\\" * inkscape_extension_name 
  dxf = tempname() * ".dxf"
  bat = tempname() * ".bat"
  text = @sprintf "@ECHO OFF \n cd \"%s\" \n python.exe \"%s\" --output=\"%s\" \"%s\"\n" inkscape_python_home inkscape_extension_path dxf svg
  text
  open(bat, "w") do file
    write(bat, text)
  end
  run(`$bat`)
  replace(dxf, "\\"=>"//")
end

function make_poly(x, s, e)
  local res =  ArchGDAL.createlinestring()
  for i in s:e
    res = ArchGDAL.union(res, x[i, "geometry"])
  end
  res = ArchGDAL.polygonize(res)
#  res = ArchGDAL.getgeom(res, 0)
  res
end

df = @pipe "https://upload.wikimedia.org/wikipedia/commons/2/26/Nicolaus_Copernicus_Signature.svg" |>
  svg2dxf(_) |> 
  ArchGDAL.read(_) |>
  ArchGDAL.getlayer(_, 0) |>
  DataFrame(_) |> 
  _.""  |>
  DataFrame(geometry=_)
df
@pipe df |> GeoDataFrames.write("out.shp", _, geom_column = :geometry)
```


```{julia}
df
function fun(x)
  res =  ArchGDAL.createlinestring()
  for i in 1:nrow(x)
    res = ArchGDAL.union(res, x[i, "geometry"])
  end
  res = ArchGDAL.polygonize(res)
res
end  
  
tbl = fun(df)
x = tbl
ArchGDAL.getgeom(x, 0) |> plot
  for i in 1:(ArchGDAL.ngeom(x) - 1)
    p = ArchGDAL.getgeom(x, i) |> plot!
    display(p)
  end
```


```{julia}
tbl
vec = []
for i in 0:(ArchGDAL.ngeom(tbl) - 1)
  push!(vec, ArchGDAL.getgeom(tbl, i)) 
end
vec
hue = ["#000000", "#4d64ae", "#000000", "#000000", "#ca3c32", "#9259a3",
       "#399746", "#000000", "#000000", "#FFFFFF", "#399746", "#000000", "#000000", "#FFFFFF"]
data = DataFrame(geometry=vec, colour = hue) 
data
GeoDataFrames.write("output3.shp", data)
```


```{julia}
g1 = ArchGDAL.createpolygon([(0.,0.), (0.,1.), (1.,1.)])
g2 = ArchGDAL.createpolygon([(0.,1.), (1.,0.), (1.,1.)])

g1 |> plot
g2 |> plot!
#ArchGDAL.difference(g1, g2)
  ArchGDAL.union(g1, g2)
```


```{julia}
g1 = ArchGDAL.createpoint(1.0, 2.0)
g2 = ArchGDAL.createpoint(1.0, 1.0)
g1 |> plot
g2 |> plot!
ArchGDAL.union(g1, g2)
ArchGDAL.difference(g1, g2)

g1 = ArchGDAL.createlinestring([(i,i+1) for i in 1.0:3.0])
g1 = ArchGDAL.createlinearring([(0.,0.), (0.,1.), (1.,1.)])
g2 = ArchGDAL.createlinearring([(0.,1.), (1.,0.), (1.,1.)])
g1 |> plot
g2 |> plot!
ArchGDAL.union(g1, g2) #|> plot
```


```{julia}
using Shapefile, Luxor
include(joinpath(dirname(pathof(Luxor)), "readshapefiles.jl"))
worldshapefile = "output3.shp"
hue = ["#000000", "#4d64ae", "#000000", "#000000", "#ca3c32", "#9259a3",
       "#399746", "#000000", "#000000", "#FFFFFF", "#399746", "#000000", 
       "#399746", "#000000", "#FFFFFF"]
worldshapes = open(worldshapefile) do f
    read(f, Shapefile.Handle)
end

worldshapes

function drawairportmap(data)
    Drawing(4000, 2000)
    origin()
    scale(10, 10)
    setline(1.0)
    #fontsize(0.075)
    gsave()
    #setopacity(0.25)
    background("#FFFFFF")
    i = 1
    for shape in data.shapes
        pgons, bbox = convert(Array{Luxor.Point, 1}, shape)
        for pgon in pgons
            #sethue(hue[i])
            poly(pgon, :fill)
            i = i + 1
        end
    end
    grestore()
    sethue("black")
    finish()
    preview()
end
drawairportmap(worldshapes)

```
