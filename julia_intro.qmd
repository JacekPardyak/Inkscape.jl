---
title: "Julia Plots"
format:
  html:
    code-fold: true
---

```{r}
```

## Parametric Plots

Plot function pair (x(u), y(u)). 
See @fig-parametric for an example.


```{julia}
#| label: fig-parametric
#| fig-cap: "Parametric Plots"

using Plots

plot(sin, 
     x->sin(2x), 
     0, 
     2Ï€, 
     leg=false, 
     fill=(0,:lavender))
```

```{r}
system('inkscape --system-data-directory', intern = TRUE)
```

```{r}
library(sf)
library(dplyr)
url = "https://upload.wikimedia.org/wikipedia/commons/1/1f/Julia_Programming_Language_Logo.svg" 
input = "data.svg"
download.file(url, destfile = input)
input_file_path = tempfile("inx_")
file.copy(input, input_file_path)
path = system('inkscape --system-data-directory', intern = TRUE)
inkscape_extensions_path = paste(path, "\\extensions", sep = "")
inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
inkscape_extension_name = "dxf12_outlines.py"
ext = ".dxf"
output = tempfile("inx_", fileext = ext)
  con  = tempfile(pattern = "inx_", fileext = ".bat")
  fmt = '@ECHO OFF
cd %s
python.exe "%s" --output="%s"  "%s"'
  text = sprintf(fmt,
                 inkscape_python_home,
                 paste(inkscape_extensions_path, inkscape_extension_name, sep = "\\"),
                 output,
                 input_file_path)
writeLines(text, con)
system(con)
output

df <- sf::st_read(output) %>% select(geometry)
df %>% sf::st_write(dsn = "data.geojson", layer = "jl.geojson", append = FALSE)

```
```{julia}
function f(x)
  url = "https://upload.wikimedia.org/wikipedia/commons/1/1f/Julia_Programming_Language_Logo.svg" 
  output  = "data.svg"
  download(url, output )
  inkscape = "inkscape"
  command = "--system-data-directory"
  path = print(run(`$inkscape $command`))
  path
  inkscape_extensions_path = path * "\\extensions"
  inkscape_extensions_path
#inkscape_python_home  = paste(gsub("\\share\\inkscape", "", path, fixed = T), "\\bin", sep = "")
#inkscape_extension_name = "dxf12_outlines.py"

end
f(3)
```


```{julia}
import Pkg; Pkg.add(["GeoJSON", "Pipe"])
using Plots, GeoJSON, DataFrames, Pipe

@pipe "data.geojson" |> 
  GeoJSON.read(_) |> 
  DataFrame(_) |> 
  _.geometry |> 
  plot
```

